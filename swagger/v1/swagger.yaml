---
swagger: '2.0'
info:
  title: API V1
  version: v1
paths:
  "/hotels":
    get:
      summary: list hotels
      tags:
      - Hotels
      consumes:
      - application/json
      produces:
      - application/json
      security:
      - Bearer: {}
      parameters:
      - name: Authorization
        in: header
        type: string
        required: true
        description: Client token
      responses:
        '200':
          description: successful
    post:
      summary: creates a hotel successfully
      tags:
      - Hotels
      consumes:
      - application/json
      produces:
      - application/json
      security:
      - Bearer: {}
      parameters:
      - name: Authorization
        in: header
        type: string
        required: true
        description: Client token
      - name: hotel
        in: body
        schema:
          type: object
          properties:
            name:
              type: string
            description:
              type: text
            rating:
              type: integer
            image:
              type: string
            location:
              type: string
            user_id:
              type: integer
            rooms:
              type: multi
          required:
          - name
          - description
          - rating
          - image
          - location
          - user_id
      responses:
        '201':
          description: hotel created
  "/hotels/{id}":
    get:
      summary: gets a hotel
      tags:
      - Hotels
      consumes:
      - application/json
      produces:
      - application/json
      security:
      - Bearer: {}
      parameters:
      - name: Authorization
        in: header
        type: string
        required: true
        description: Client token
      - name: id
        in: path
        type: integer
        required: true
      responses:
        '200':
          description: successful
    delete:
      summary: deletes a hotel
      tags:
      - Hotels
      consumes:
      - application/json
      produces:
      - application/json
      security:
      - Bearer: {}
      parameters:
      - name: Authorization
        in: header
        type: string
        required: true
        description: Client token
      - name: id
        in: path
        type: integer
        required: true
      responses:
        '200':
          description: successful
  "/reservations":
    get:
      summary: List reservations
      tags:
      - Reservations
      consumes:
      - application/json
      produces:
      - application/json
      security:
      - Bearer: {}
      parameters:
      - name: Authorization
        in: header
        type: string
        required: true
        description: Client token
      responses:
        '200':
          description: successful
    post:
      summary: Creates a reservation successfully
      tags:
      - Reservations
      consumes:
      - application/json
      produces:
      - application/json
      security:
      - Bearer: {}
      parameters:
      - name: Authorization
        in: header
        type: string
        required: true
        description: Client token
      - name: reservation
        in: body
        schema:
          type: object
          properties:
            date:
              type: string
              format: datetime
            hotel_room_id:
              type: integer
            user_id:
              type: integer
          required:
          - date
          - hotel_room_id
      responses:
        '201':
          description: reservation created
  "/reservations/{id}":
    delete:
      summary: Deletes a reservation
      tags:
      - Reservation
      consumes:
      - application/json
      produces:
      - application/json
      security:
      - Bearer: {}
      parameters:
      - name: Authorization
        in: header
        type: string
        required: true
        description: Client token
      - name: id
        in: path
        type: integer
        required: true
      responses:
        '200':
          description: successful
  "/users":
    post:
      summary: creates an user successfully
      tags:
      - Users
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: user
        in: body
        schema:
          type: object
          properties:
            name:
              type: string
            email:
              type: string
            password:
              type: string
            image:
              type: string
            admin:
              type: boolean
          required:
          - name
          - email
          - password
      responses:
        '201':
          description: user created
  "/auth/login":
    post:
      summary: logs in an existing user
      tags:
      - Users
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: user
        in: body
        schema:
          type: object
          properties:
            email:
              type: string
            password:
              type: string
          required:
          - email
          - password
      responses:
        '200':
          description: user logged in
  "/users/{id}":
    delete:
      summary: deletes an existing user
      tags:
      - Users
      consumes:
      - application/json
      produces:
      - application/json
      security:
      - Bearer: {}
      parameters:
      - name: Authorization
        in: header
        type: string
        required: true
        description: Client token
      - name: id
        in: path
        type: integer
        required: true
      responses:
        '200':
          description: success
servers:
- url: http://{defaultHost}
  variables:
    defaultHost:
      default: https://microvago.herokuapp.com/
